var currentScene = 0;
var stillPlaying = true;
var adjustX = 25;
var keyPressedState = {}; //object to store the state of pressed key
var spacebarPressed = false; //Flag to track spacebar press
var score = 0; //score based on aliens hit and bitmoji hit

var drawBitmoji = function (bitmojiObject) {
// Body
    noStroke(); fill(bitmojiObject.shirtColor);
    quad(bitmojiObject.bitmojiX+194*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+215*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiX+330*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+215*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiX+350*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+270*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiX+185*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+270*bitmojiObject.bitmojiH/150);
    rect(bitmojiObject.bitmojiX+185*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+270*bitmojiObject.bitmojiH/150, 180*bitmojiObject.bitmojiH/150, 140*bitmojiObject.bitmojiH/150); fill(151, 172, 196);
// Arm
    stroke(0, 0, 0); fill(bitmojiObject.shirtColor);
    ellipse(bitmojiObject.bitmojiX+346*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+381*bitmojiObject.bitmojiH/150, 60*bitmojiObject.bitmojiH/150, 340*bitmojiObject.bitmojiH/150);
// Arm cut off box
    noStroke(); fill(255, 255, 255);
    rect(bitmojiObject.bitmojiX+185*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+412*bitmojiObject.bitmojiH/150, 194*bitmojiObject.bitmojiH/150, 140*bitmojiObject.bitmojiH/150);
// Head
    noStroke(); fill(255, 227, 161);
    ellipse(bitmojiObject.bitmojiX+260*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+135*bitmojiObject.bitmojiH/150, 170*bitmojiObject.bitmojiH/150, 200*bitmojiObject.bitmojiH/150);
    stroke(133, 80, 0); fill(138, 85, 0);
    arc(bitmojiObject.bitmojiX+264*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+172*bitmojiObject.bitmojiH/150, 165*bitmojiObject.bitmojiH/150, 130*bitmojiObject.bitmojiH/150, -16, 180);
    noStroke(); fill(255, 227, 161);
    ellipse(bitmojiObject.bitmojiX+256*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+175*bitmojiObject.bitmojiH/150, 130*bitmojiObject.bitmojiH/150, 86*bitmojiObject.bitmojiH/150); fill(255, 255, 255);
    ellipse(bitmojiObject.bitmojiX+210*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+119*bitmojiObject.bitmojiH/150, 50*bitmojiObject.bitmojiH/150, 50*bitmojiObject.bitmojiH/150);
    ellipse(bitmojiObject.bitmojiX+280*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+119*bitmojiObject.bitmojiH/150, 50*bitmojiObject.bitmojiH/150, 50*bitmojiObject.bitmojiH/150); fill(156, 96, 0);
    ellipse(bitmojiObject.bitmojiX+205*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+122*bitmojiObject.bitmojiH/150, 25*bitmojiObject.bitmojiH/150, 25*bitmojiObject.bitmojiH/150);
    ellipse(bitmojiObject.bitmojiX+275*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+122*bitmojiObject.bitmojiH/150, 25*bitmojiObject.bitmojiH/150, 25*bitmojiObject.bitmojiH/150); stroke(255, 213, 3); strokeWeight(3*bitmojiObject.bitmojiH/150); noFill();
    ellipse(bitmojiObject.bitmojiX+209*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+120*bitmojiObject.bitmojiH/150, 67*bitmojiObject.bitmojiH/150, 47*bitmojiObject.bitmojiH/150);
    ellipse(bitmojiObject.bitmojiX+278*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+120*bitmojiObject.bitmojiH/150, 67*bitmojiObject.bitmojiH/150, 47*bitmojiObject.bitmojiH/150); noStroke(); fill(255, 255, 255);
    arc(bitmojiObject.bitmojiX+252*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+184*bitmojiObject.bitmojiH/150, 83*bitmojiObject.bitmojiH/150, 48*bitmojiObject.bitmojiH/150, -8, 185); fill(138, 85, 0);
    arc(bitmojiObject.bitmojiX+262*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+87*bitmojiObject.bitmojiH/150, 156*bitmojiObject.bitmojiH/150, 60*bitmojiObject.bitmojiH/150, 179, 371);
    arc(bitmojiObject.bitmojiX+315*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+128*bitmojiObject.bitmojiH/150, 74*bitmojiObject.bitmojiH/150, 154*bitmojiObject.bitmojiH/150, 243, 439); fill(109, 125, 191);
    arc(bitmojiObject.bitmojiX+262*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+79*bitmojiObject.bitmojiH/150, 162*bitmojiObject.bitmojiH/150, 115*bitmojiObject.bitmojiH/150, 180, 365); fill(196, 2, 2);
    arc(bitmojiObject.bitmojiX+241*bitmojiObject.bitmojiH/150, bitmojiObject.bitmojiY+80*bitmojiObject.bitmojiH/150, 120*bitmojiObject.bitmojiH/150, 35*bitmojiObject.bitmojiH/150, 8, 181);
    if (bitmojiObject.initials === true) {
        fill(151, 172, 196);
        textSize(55*bitmojiObject.bitmojiH/150);
        text("EZ", bitmojiObject.bitmojiX+209*bitmojiObject.bitmojiH/150+14, bitmojiObject.bitmojiY+291*bitmojiObject.bitmojiH/150);
    }
};

var drawBitmoji1 = function(x, y, h, shirtColor)
{
    var Bitmoji1 = function(bitmojiConfig)
    {
        this.bitmojiConfig = bitmojiConfig;
    };

    Bitmoji1.prototype.drawHead = function()
    {
        var ratio = this.bitmojiConfig.bitH / 155;
        //neck
        noStroke();
        fill(255, 228, 199); //skin tone
        bezier(this.bitmojiConfig.bitX + 50 * ratio, this.bitmojiConfig.bitY + 98 * ratio, this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY - 5 * ratio, this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY - 5 * ratio, this.bitmojiConfig.bitX + 100 * ratio, this.bitmojiConfig.bitY + 98 * ratio); //neck
        //head
        noStroke();
        fill(255, 228, 199); //skin tone
        ellipse(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 40 * ratio, 65 * ratio, 80 * ratio); //head shape
        //head shaper
            fill(3, 3, 3); //black
            noStroke();
            arc(this.bitmojiConfig.bitX + 50 * ratio, this.bitmojiConfig.bitY + 40 * ratio, 15* ratio, 50 * ratio, 90, 270); //left shaper
            arc(this.bitmojiConfig.bitX + 100 * ratio, this.bitmojiConfig.bitY + 40 * ratio, 15 * ratio, 50* ratio, -90, 90); //right shaper
    };
    
    Bitmoji1.prototype.drawHair = function()
    {
        var ratio = this.bitmojiConfig.bitH / 155;
        //hair
        noStroke();
        fill(84, 56, 14); //hair color
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 67 * ratio, 50 * ratio, 25 * ratio, -20, 200); //beard
        arc(this.bitmojiConfig.bitX + 98 * ratio, this.bitmojiConfig.bitY + 48 * ratio, 10 * ratio, 43 * ratio, -58, 137); //beard right
        arc(this.bitmojiConfig.bitX + 52 * ratio, this.bitmojiConfig.bitY + 48 * ratio, 10 * ratio, -43 * ratio, 122, 317); //left beard
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 54 * ratio, 50 * ratio, -15 * ratio, -20, 200); //mustache
        arc(this.bitmojiConfig.bitX + 50 * ratio, this.bitmojiConfig.bitY + 24 * ratio, 5 * ratio, 13 * ratio, 90, 270); //left sideburn
        arc(this.bitmojiConfig.bitX + 100 * ratio, this.bitmojiConfig.bitY + 24 * ratio, 5 * ratio, 13 * ratio, -90, 90); //right sideburn
    };

    Bitmoji1.prototype.drawGlasses = function()
    {
        var ratio = this.bitmojiConfig.bitH / 155;
        //glasses
        stroke(0, 0, 0); 
        strokeWeight(2); //line thickness
        fill(255, 255, 255); //white
        quad(this.bitmojiConfig.bitX + 48 * ratio, this.bitmojiConfig.bitY + 28 * ratio, this.bitmojiConfig.bitX + 51 * ratio, this.bitmojiConfig.bitY + 38 * ratio, this.bitmojiConfig.bitX + 67 * ratio, this.bitmojiConfig.bitY + 38 * ratio, this.bitmojiConfig.bitX + 71 * ratio, this.bitmojiConfig.bitY + 28 * ratio); //left lens
        quad(this.bitmojiConfig.bitX + 102 * ratio, this.bitmojiConfig.bitY + 28 * ratio, this.bitmojiConfig.bitX + 99 * ratio, this.bitmojiConfig.bitY + 38 * ratio, this.bitmojiConfig.bitX + 83 * ratio, this.bitmojiConfig.bitY + 38 * ratio, this.bitmojiConfig.bitX + 79 * ratio, this.bitmojiConfig.bitY + 28 * ratio); //right lens
        fill(255, 228, 199); //skin tone
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 28 * ratio, 9 * ratio, 1 * ratio, 185, 360); //glasses bridge
        line(this.bitmojiConfig.bitX + 100 * ratio, this.bitmojiConfig.bitY + 28 * ratio, this.bitmojiConfig.bitX + 103 * ratio, this.bitmojiConfig.bitY + 28 * ratio); //right framearm
        line(this.bitmojiConfig.bitX + 47 * ratio, this.bitmojiConfig.bitY + 28 * ratio, this.bitmojiConfig.bitX + 50 * ratio, this.bitmojiConfig.bitY + 28 * ratio); //left framearm
    };

    Bitmoji1.prototype.drawFace = function()
    {
        var ratio = this.bitmojiConfig.bitH / 155;
        //nose
        stroke(0, 0, 0);
        fill(255, 228, 199); //skin tone
        strokeWeight(1);
        bezier(this.bitmojiConfig.bitX + 72 * ratio, this.bitmojiConfig.bitY + 35 * ratio, this.bitmojiConfig.bitX + 65 * ratio, this.bitmojiConfig.bitY + 50 * ratio, this.bitmojiConfig.bitX + 85 * ratio, this.bitmojiConfig.bitY + 50 * ratio, this.bitmojiConfig.bitX + 78 * ratio, this.bitmojiConfig.bitY + 35 * ratio); //nose
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 65 * ratio, 13 * ratio, -3 * ratio, 0, 180); //chin
        //mouth
        fill(255, 255, 255); //teeth color
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 57 * ratio, 20 * ratio, 8 * ratio, 0, 180); //lower mouth
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 57 * ratio, 20 * ratio, -3 * ratio, 0, 180); //upper mouth
    };

    Bitmoji1.prototype.drawEyes = function()
    {
        var ratio = this.bitmojiConfig.bitH / 155;
        //eyes
        stroke(0, 0, 0);
        strokeWeight(1);
        fill(84, 56, 14); //hair color
        ellipse(this.bitmojiConfig.bitX + 60 * ratio, this.bitmojiConfig.bitY + 33 * ratio, 5 * ratio, 5 * ratio); //left eye
        ellipse(this.bitmojiConfig.bitX + 90 * ratio, this.bitmojiConfig.bitY + 33 * ratio, 5 * ratio, 5 * ratio); //right eye
    };

    Bitmoji1.prototype.drawClothes = function() 
    {
        var ratio = this.bitmojiConfig.bitH / 155;
        //hat
        noStroke();
        fill(235, 235, 211); //beige
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 20 * ratio, 55 * ratio, -40 * ratio, 0, 180); //hat body
        stroke(86, 83, 64);
        fill(86, 83, 64); //darker beige
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 19 * ratio, 50 * ratio, -15 * ratio, 0, 180); //hat brim
        //body
        noStroke();
        if (this.bitmojiConfig.shirtColor) 
        {
            if (this.bitmojiConfig.row === 0) 
            {
                fill(255, 0, 0);
            } else if (this.bitmojiConfig.row === 1 || this.bitmojiConfig.row === 2) 
            {
                fill(0, 146,  250);
            } else if (this.bitmojiConfig.row === 3 || this.bitmojiConfig.row === 4) 
            {
                fill(0, 255, 0);
            }
        }
        fill(this.bitmojiConfig.shirtColor);//shirt color
        ellipse(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 105 * ratio, 140 * ratio, 36 * ratio);//shoulders
        fill(255, 228, 199); //skin tone
        arc(this.bitmojiConfig.bitX + 75 * ratio, this.bitmojiConfig.bitY + 85 * ratio, 80 * ratio, 15 * ratio, 30, 150); //neckline
        fill(this.bitmojiConfig.shirtColor);//shirt color
        noStroke();
        quad(this.bitmojiConfig.bitX + 105 * ratio, this.bitmojiConfig.bitY + 103 * ratio, this.bitmojiConfig.bitX + 145 * ratio, this.bitmojiConfig.bitY + 103 * ratio, this.bitmojiConfig.bitX + 150 * ratio, this.bitmojiConfig.bitY + 150 * ratio, this.bitmojiConfig.bitX + 110 * ratio, this.bitmojiConfig.bitY + 150 * ratio);//right arm
        quad(this.bitmojiConfig.bitX + 5 * ratio, this.bitmojiConfig.bitY + 103 * ratio, this.bitmojiConfig.bitX + 52 * ratio, this.bitmojiConfig.bitY + 103 * ratio, this.bitmojiConfig.bitX + 35 * ratio, this.bitmojiConfig.bitY + 150 * ratio, this.bitmojiConfig.bitX + 0 * ratio, this.bitmojiConfig.bitY + 150 * ratio);//left arm
        strokeWeight(0.5);
        rect(this.bitmojiConfig.bitX + 35 * ratio, this.bitmojiConfig.bitY + 118 * ratio, 80 * ratio, 32 * ratio);//torso
        stroke(1);
        line(this.bitmojiConfig.bitX + 35 * ratio, this.bitmojiConfig.bitY + 120 * ratio, this.bitmojiConfig.bitX + 30 * ratio, this.bitmojiConfig.bitY + 150 * ratio);
        line(this.bitmojiConfig.bitX + 115 * ratio, this.bitmojiConfig.bitY + 120 * ratio, this.bitmojiConfig.bitX + 120 * ratio, this.bitmojiConfig.bitY + 150 * ratio);
    };

    Bitmoji1.prototype.drawInitials = function()
    {
        if (this.bitmojiConfig.initials) //turning initials into a variable that can be toggled
        {
            var ratio = this.bitmojiConfig.bitH / 155;
            //initials
            stroke(1);
            line(this.bitmojiConfig.bitX + 55 * ratio, this.bitmojiConfig.bitY + 125 * ratio, this.bitmojiConfig.bitX + 50 * ratio, this.bitmojiConfig.bitY + 140 * ratio); // /
            line(this.bitmojiConfig.bitX + 55 * ratio, this.bitmojiConfig.bitY + 125 * ratio, this.bitmojiConfig.bitX + 60 * ratio, this.bitmojiConfig.bitY + 140 * ratio); // \
            line(this.bitmojiConfig.bitX + 65 * ratio, this.bitmojiConfig.bitY + 125 * ratio, this.bitmojiConfig.bitX + 60 * ratio, this.bitmojiConfig.bitY + 140 * ratio); // /
            line(this.bitmojiConfig.bitX + 65 * ratio, this.bitmojiConfig.bitY + 125 * ratio, this.bitmojiConfig.bitX + 70 * ratio, this.bitmojiConfig.bitY + 140 * ratio); // \
            arc(this.bitmojiConfig.bitX + 88 * ratio, this.bitmojiConfig.bitY + 133 * ratio, 15 * ratio, 15 * ratio, 60, 300);// C
        }
    };
    
    var Bitmoji1 = new Bitmoji1({
    bitX: x,
    bitY: y,
    bitH: h,
    initials: true,
    shirtColor: shirtColor,
    }); 
    
    Bitmoji1.drawHead();
    Bitmoji1.drawHair();
    Bitmoji1.drawGlasses();
    Bitmoji1.drawFace();
    Bitmoji1.drawEyes();
    Bitmoji1.drawClothes();
    Bitmoji1.drawInitials();
};

var currentScene = 0; // 0 = Splash Screen, 1 = Clock 

var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(CENTER, TOP);
    text(this.label, this.x+75, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var btn1 = new Button({
    x: 128,
    y: 330,
    label: "START!",
    onClick: function() {
        currentScene = 1;
    }
});

var Player = function (config){
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 30;
    this.height = config.height || 20;
    this.speed = config.speed || 10;
};

Player.prototype.draw = function() {
    drawBitmoji({bitmojiX: this.x, bitmojiY: this.y + 45, bitmojiH: this.height, shirtColor: color(151, 172, 196), initials:true});
};

Player.prototype.moveRight = function() {
    if (this.x + this.width < width - adjustX) { //Keeps player on screen, adjusted to consider the bitmoji's width
        this.x += this.speed;
    }
};

Player.prototype.moveLeft = function() {
    if (this.x > adjustX - 45) { //Keeps player on screen, adjusted to consider the bitmoji's width
        this.x -= this.speed;
}
    };

var player = new Player({
    x:200,
    y:300
});

var Projectile = function(x, y) {
    this.x = x;
    this.y = y;
    this.width = 5;
    this.height = 10;
    this.speed = 5;
};

Projectile.prototype.draw = function() {
    fill(255, 255, 255);
    rect(this.x, this.y, this.width, this.height);
};

Projectile.prototype.update = function() {
    this.y -= this.speed;
};

var projectiles = [];

var AlienProjectile = function(x, y)
{
    this.x = x;
    this.y = y;
    this.size = 5;
    this.speed = 5;
    this.active = true;
};

AlienProjectile.prototype.update = function()
{
    this.y += this.speed;
    if (this.y > height)
    {
        this.active = false;
    }
};

AlienProjectile.prototype.display = function()
{
    fill(255, 255, 255);
    ellipse(this.x, this.y, this.size, this.size);
};

var aliens = [];
var alienProjectiles = [];

var Alien = function(x, y, bitmojiConfig) 
{
    this.x = x;
    this.y = y;
    this.size = 30;
    this.speed = 0.0;
    this.direction = 1;
    this.drop = 1;
    this.bitmojiConfig = bitmojiConfig; //Store bitmoji1's configuration
};

Alien.prototype.move = function() 
{
    // Move all aliens horizontally
    for (var i = 0; i < aliens.length; i++) 
    {
        aliens[i].x += aliens[i].speed * aliens[i].direction;
    }
    // Check if alien had reached bottom of screen
    for (var j = 0; j < aliens.length; j++)
    { 
        if (aliens[j].y >= height - 40)
        {
            // Stop aliens for moving further
            aliens[j].speed = 0;
            aliens[j].y = height - 50;
            // Flag indicating aliens has won
            aliens[j].reachedBottom = true;
        }
    }
};

Alien.prototype.checkEdge = function() 
{
    var rightmostAlienX = -Infinity;
    var leftmostAlienX = Infinity;
    
    // Find the rightmost and leftmost aliens
    for (var i = 0; i < aliens.length; i++) 
    {
        if (aliens[i].x > rightmostAlienX) 
        {
            rightmostAlienX = aliens[i].x;
        }
        if (aliens[i].x < leftmostAlienX) 
        {
            leftmostAlienX = aliens[i].x;
        }
    }
    
    // If any alien is at the edge of the screen horizontally, reverse their direction and move them down slightly
    if (rightmostAlienX >= width - 25 || leftmostAlienX <= 0) 
    {
        for (var j = 0; j < aliens.length; j++) 
        {
            aliens[j].direction *= -1; // Reverse direction
            aliens[j].y += 10; // Drop down slightly
            aliens[j].speed += 0.001; // Slightly increase speed
        }
    }
};

Alien.prototype.display = function() 
{
    //draw bitmoji1 based on stored configuration
    drawBitmoji1(this.x, this.y, this.size, this.bitmojiConfig.shirtColor);
};

var maxProjectiles = 2; // Max number of projectiles active

Alien.prototype.shoot = function()
{
    var numActiveProjectiles = 0;
    for (var i = 0; i < alienProjectiles.length; i++)
    {
        if (alienProjectiles[i].active)
        {
            numActiveProjectiles++;
        }
    }
    
    if (numActiveProjectiles < maxProjectiles && random(1) < 0.005)
    {
        return new AlienProjectile(this.x, this.y);
    }
    return null;
};

var numRows = 5;
var numCol = 10;

var drawAlien = function(x, y, bitmojiConfig, row) 
{
    bitmojiConfig = bitmojiConfig || {};
    if (row === 0)
    {
        bitmojiConfig.shirtColor = color(255, 0, 0);
    } else if (row === 1 || row === 2)
    {
        bitmojiConfig.shirtColor  = color(0, 146, 250);
    } else if (row === 3 || row === 4)
    {
        bitmojiConfig.shirtColor = color(0, 255, 0);
    } 
    bitmojiConfig.row = row; //Set the row property
    var alien = new Alien(x, y, bitmojiConfig);
    aliens.push(alien);
};

var updateAliens = function() {
    for (var i = 0; i < aliens.length; i++) {
        aliens[i].move();
        aliens[i].display();

        // Alien shoots
        var alienProjectileInstance = aliens[i].shoot();
        if (alienProjectileInstance) {
            alienProjectiles.push(alienProjectileInstance);
        }
    }

    // Update alienProjectiles
    for (var j = alienProjectiles.length - 1; j >= 0; j--) {
        var alienProjectileInstance = alienProjectiles[j];
        alienProjectileInstance.update();
        alienProjectileInstance.display();

        // Remove alienProjectile if it's not active (off-screen)
        if (!alienProjectileInstance.active) {
            alienProjectiles.splice(j, 1);
        }
    }

    aliens[0].checkEdge(); // Check edge only once when the rightmost alien reaches the edge
};

var spacingX = 30;
var spacingY = 30;

var createAlienGrid = function() {
    var BitmojiConfigs = [];

    for (var row = 0; row < numRows; row++) {
        for (var col = 0; col < numCol; col++) {
            var x = col * spacingX + 25;
            var y = row * spacingY + 5;
            drawAlien(x, y, BitmojiConfigs[row], row); // Pass the row parameter
        }
    }
};

createAlienGrid();

var drawScene1 = function () {
    currentScene = 0;
    background(0, 0, 0);
    fill(255, 255, 255);
    textSize(30);
    textAlign(CENTER);
    text("Bitmoji Invaders", 200, 50);
    textSize(16);
    text("Bitmoji's are invading from Outerspace! Use the Arrow keys to move left to right to evade enemy fire and return fire using the Space bar!", 50, 70, 300, 300);
    btn1.draw();
    drawBitmoji({bitmojiX:240, bitmojiY:263, bitmojiH:50, shirtColor:color(82, 82, 82), initials:true});
    drawBitmoji1(0, 272, 133, color(255, 0, 255));
};

var drawScene2 = function () {
    background(0, 0, 0);
    updateAliens();
    player.draw();
    for (var i = projectiles.length - 1; i >= 0; i--) {
        var projectile = projectiles[i];
        noFill();
        stroke(255, 0, 0);
        rect(projectile.x, projectile.y, projectile.width, projectile.height);
        for (var j = aliens.length - 1; j >= 0; j--) {
            var alien = aliens[j];
            noFill();
            stroke(255, 145, 0);
            rect(alien.x, alien.y, alien.size, alien.size);
            // Define a hitbox for the projectiles
            var projBox = {
                x: projectile.x,
                y: projectile.y,
                width: projectile.width,
                height: projectile.height
            };
            
            // Define a hitbox for the aliens
            var alienBox = {
                x: alien.x,
                y: alien.y,
                width: alien.size,
                height: alien.size
            };
            
            // Check for hitbox collision
            if (projBox.x < alienBox.x + alienBox.width && projBox.x + projBox.width > alienBox.x && projBox.y < alienBox.y + alienBox.height && projBox.y + projBox.height > alienBox.y) 
            // Removes projectile and alien
            {
                projectiles.splice(i, 1);
                aliens.splice(j, 1);
                score++;
            }
        }
        if (projectiles[i]) {
            projectiles[i].draw();
            projectiles[i].update();
            if (projectiles[i].y < 0) {
                projectiles.splice(i, 1);
            }
        }
    }
};

keyPressed = function() {
    keyPressedState[keyCode] = true; // Set the keyCode to true when pressed
    if (keyCode === 32 && currentScene === 1 && !spacebarPressed) { // Spacebar
        projectiles.push(new Projectile(player.x + (player.width / 5) - (-50 / 2), player.y + 35));
        spacebarPressed = true;
    }
};

keyReleased = function() {
    keyPressedState[keyCode] = false; // Set the keyCode to false when released
    if (keyCode === 32) {
        spacebarPressed = false; // Reset spacebarPressed flag
    }
};
   
//handle mouse clicks
mouseClicked = function() {
    if (currentScene === 0) {
        btn1.handleMouseClick();
    }
};
    
draw = function() {
    if (stillPlaying) {
        if (keyPressedState[RIGHT]) { // Move right if RIGHT key is pressed
            player.moveRight();
        }
        if (keyPressedState[LEFT]) { // Move left if LEFT key is pressed
            player.moveLeft();
        }
        // Check for button clicks
        if (currentScene === 0) {
            drawScene1();
        } else if (currentScene === 1) {
            drawScene2();
        }
    }
};

drawScene1();
